// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var List                                  = require("bs-platform/lib/js/list.js");
var $$Array                               = require("bs-platform/lib/js/array.js");
var Curry                                 = require("bs-platform/lib/js/curry.js");
var $$String                              = require("bs-platform/lib/js/string.js");
var Pervasives                            = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions                       = require("bs-platform/lib/js/caml_exceptions.js");
var Snabbdom_external                     = require("./snabbdom_external.js");
var Snabbdom$slashmodules$slashclass      = require("snabbdom/modules/class");
var Snabbdom$slashmodules$slashstyle      = require("snabbdom/modules/style");
var Snabbdom$slashmodules$slashattributes = require("snabbdom/modules/attributes");

var Not_supported = Caml_exceptions.create("Snabbdom_base.Not_supported");

function set_data_path(path, value, vnode) {
  return Snabbdom_external.VNode[/* set_in_path */10](vnode, $$Array.append(/* array */["data"], path), value);
}

var partial_arg = /* array */["ns"];

function namespace(param, param$1) {
  return set_data_path(partial_arg, param, param$1);
}

function recursively_set_namespace(ns, vnode) {
  var vnode$1 = Curry._2(namespace, ns, vnode);
  var match = Snabbdom_external.VNode[/* get_children */7](vnode$1);
  if (match) {
    $$Array.map((function (param) {
            return recursively_set_namespace(ns, param);
          }), match[0]);
  }
  return vnode$1;
}

function h(selector, transformers) {
  var vnode = Snabbdom_external.VNode[/* empty */0](/* () */0);
  Snabbdom_external.VNode[/* set_data */2](vnode, Snabbdom_external.Data[/* empty */0](/* () */0));
  Snabbdom_external.VNode[/* set_sel */1](vnode, selector);
  var transform = function (vnode, transformer) {
    return Curry._1(transformer, vnode);
  };
  var vnode$1 = List.fold_left(transform, vnode, transformers);
  var len = selector.length;
  var is_svg;
  if (len === 3) {
    is_svg = +(selector === "svg");
  } else if (len >= 4) {
    var match = $$String.sub(selector, 0, 4);
    switch (match) {
      case "svg#" : 
      case "svg." : 
          is_svg = /* true */1;
          break;
      default:
        is_svg = /* false */0;
    }
  } else {
    is_svg = /* false */0;
  }
  if (is_svg) {
    return recursively_set_namespace("http://www.w3.org/2000/svg", vnode$1);
  } else {
    return vnode$1;
  }
}

function text_vnode(t) {
  var node = Snabbdom_external.VNode[/* empty */0](/* () */0);
  Snabbdom_external.VNode[/* set_text */4](node, t);
  return node;
}

function children(new_children, vnode) {
  var match = Snabbdom_external.VNode[/* get_children */7](vnode);
  var match$1 = Snabbdom_external.VNode[/* get_text */9](vnode);
  if (match) {
    if (match$1) {
      throw Not_supported;
    } else {
      Snabbdom_external.VNode[/* set_children */3](vnode, $$Array.append(match[0], $$Array.of_list(new_children)));
    }
  } else if (match$1) {
    Snabbdom_external.VNode[/* clear_text */6](vnode);
    Snabbdom_external.VNode[/* set_children */3](vnode, $$Array.of_list(Pervasives.$at(/* :: */[
                  text_vnode(match$1[0]),
                  /* [] */0
                ], new_children)));
  } else {
    Snabbdom_external.VNode[/* set_children */3](vnode, $$Array.of_list(new_children));
  }
  return vnode;
}

function text(new_text, vnode) {
  var match = Snabbdom_external.VNode[/* get_children */7](vnode);
  if (match) {
    Snabbdom_external.VNode[/* set_children */3](vnode, $$Array.append(match[0], /* array */[text_vnode(new_text)]));
  } else {
    Snabbdom_external.VNode[/* set_text */4](vnode, new_text);
  }
  return vnode;
}

function key(key$1, vnode) {
  Snabbdom_external.VNode[/* set_key */5](vnode, key$1);
  return vnode;
}

function nothing(a) {
  return a;
}

function attr(key, value) {
  var partial_arg = /* array */[
    "attrs",
    key
  ];
  return (function (param) {
      return set_data_path(partial_arg, value, param);
    });
}

function class_name(key) {
  var partial_arg = true;
  var partial_arg$1 = /* array */[
    "class",
    key
  ];
  return (function (param) {
      return set_data_path(partial_arg$1, partial_arg, param);
    });
}

function style(style_attr, value) {
  var partial_arg = /* array */[
    "style",
    style_attr
  ];
  return (function (param) {
      return set_data_path(partial_arg, value, param);
    });
}

function style_delayed(style_attr, value) {
  var partial_arg = /* array */[
    "style",
    "delayed",
    style_attr
  ];
  return (function (param) {
      return set_data_path(partial_arg, value, param);
    });
}

function style_remove(style_attr, value) {
  var partial_arg = /* array */[
    "style",
    "remove",
    style_attr
  ];
  return (function (param) {
      return set_data_path(partial_arg, value, param);
    });
}

var module_attributes = Snabbdom$slashmodules$slashattributes.default;

var module_class = Snabbdom$slashmodules$slashclass.default;

var module_style = Snabbdom$slashmodules$slashstyle.default;

exports.Not_supported     = Not_supported;
exports.h                 = h;
exports.set_data_path     = set_data_path;
exports.children          = children;
exports.text              = text;
exports.key               = key;
exports.nothing           = nothing;
exports.module_attributes = module_attributes;
exports.attr              = attr;
exports.module_class      = module_class;
exports.class_name        = class_name;
exports.module_style      = module_style;
exports.style             = style;
exports.style_delayed     = style_delayed;
exports.style_remove      = style_remove;
/* module_attributes Not a pure module */
